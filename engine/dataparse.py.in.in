# vim:set et sts=4 sw=4:
#
# ibus-tmpl - The Input Bus template project
#
# Copyright (c) 2007-2012 Peng Huang <shawn.p.huang@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


import string
import mmap
import os

class DataParse:
    
    def __init__(self):
        # initialize mmap
        self.__indexmap = None
        indexfile = '${pkgdatadir}/index'
        fno = os.open(indexfile, os.O_RDONLY)
        stat = os.stat(indexfile)
    	
        if fno > 0:
            self.__indexmap = mmap.mmap(fno, int(stat.st_size), access = mmap.ACCESS_READ)
            self.__indexsize = stat.st_size

        self.__descmap = None
        descfile = '${pkgdatadir}/UnicodeData.txt'
        fno = os.open(descfile, os.O_RDONLY)
        stat = os.stat(descfile)
        if fno > 0:
            self.__descmap = mmap.mmap(fno, int(stat.st_size), access = mmap.ACCESS_READ)
            self.__descsize = stat.st_size
        
        
    def find_candidates(self, wordlist):
        if self.__indexmap == None:
            return []
        
        masterlist = None
        masterfuzzylist = None
    
        ## todo: sorting policy
        # ideally
    
        for word in wordlist:
            (codelist, fuzzy_codelist) = self.__find_codes(word)
            if masterlist == None:
                masterlist = set(codelist).difference(set(['']))
                masterfuzzylist = (set(fuzzy_codelist) | set(codelist)).difference(set(['']))
            else:
                masterlist = masterlist & set (codelist)
                masterfuzzylist = masterfuzzylist & (set(fuzzy_codelist) | set(codelist))
        
        return (masterlist, masterfuzzylist.difference(masterlist))
    
    def __find_codes(self, word, lower = 0, upper = -1):
        ''' Binary search to find candidates in index file '''
        
        i = j = 0
        entry = ''
        clist = ''
        fuzlist = ''
        if upper == -1: upper = self.__indexsize
        
        if lower >= upper:
            return ([], [])
        
        search = (lower + upper) / 2
        while (search > lower):
            if self.__indexmap[search] == '\n':
                search += 1
                break
            search -= 1
        
        (entry, j) = self.__next_index_word(search, j)
        
        if entry == word:
            (clist, j) = self.__next_index_data(search, j)
            
            # check for further matches...
            if len(word) >= 3:
                while True:
                    (entry, j) = self.__next_index_word(search, j)
                    
                    if entry.startswith(word):
                        (data, j) = self.__next_index_data(search, j)
                        fuzlist += data + ' '
                    else:
                        break
            return ( clist.split(' ') , fuzlist.split(' ') )
            
        elif entry < word:
            while self.__indexmap[search + j] != '\n':
                j += 1
            j += 1
            
            # check for further matches...
            # return self.__find_codes(word, search + j, upper)
            
            ( rv, fuzrv ) = self.__find_codes(word, search + j, upper)
            if rv != [] or fuzrv != []: return ( rv, fuzrv )
            
            # if inexact match, on the last iteration, chances
            # are we are *just* before
            # the entry with the prefix match
            # so check the subsequent entries to see if they match
            
            if len(word) >= 3:
                while True:
                    (entry, j) = self.__next_index_word(search, j)
                    
                    if entry.startswith(word):
                        (data, j) = self.__next_index_data(search, j)
                        fuzlist += data + ' '
                    else:
                        break
                
                return ([], fuzlist.split(' '))
            else:
                return ([], [])
            
        else:
            return self.__find_codes(word, lower, search)
    
    def __next_index_word(self, search, j):
        entry = ''
        while search + j < self.__indexsize and \
            self.__indexmap[search + j] != ';':
            
            entry += self.__indexmap[search + j]
            j += 1
        
        return (entry, j + 1)
    
    def __next_index_data(self, search, j):
        entry = ''
        while search + j < self.__indexsize and \
            self.__indexmap[search + j] != '\n':
            
            entry += self.__indexmap[search + j]
            j += 1
        
        return (entry.strip(), j + 1)
        
    
    
    def match(word, entry):
        if len(word) >= 10000: ## todo partial matches
            return entry.startswith(word)
        else:
            return entry == word
    
    def find_description(self, code, lower = 0, upper = -1):
        ''' Binary search to find description in file '''
        
        
        if self.__descmap == None:
            return ''
        
        if upper == -1: upper = self.__descsize
        
        if lower >= upper:
            return ''
        
        i = j = 0
        entry = ''
        description = ''
        search = (lower + upper) / 2
        while (search > lower):
            if self.__descmap[search] == '\n':
                search += 1
                break
            search -= 1
        
        while (search + j < upper and
            self.__descmap[search + j] != ';'):
            entry += self.__descmap[search + j]
            j += 1
        
        if entry == code:
            j+=1         # skip over the initial semicolon
            while self.__descmap[search + j] != ';':
                description += self.__descmap[search + j]
                j+=1
            return description
        
        entry_length = len(entry)
        if entry_length < len(code) or \
            (entry_length == len(code) and \
            entry < code):
            # search upper
            
            while self.__descmap[search + j] != '\n':
                j+=1
            j+=1 # skip over newline
            return self.find_description(code, search + j, upper)
            
        elif entry_length > len(code) or \
            (entry_length == len(code) and \
            entry > code):
            # search lower
            return self.find_description(code, lower, search)
        
        
